import { JwtHelperService } from '@auth0/angular-jwt';
import { HttpClient } from '@angular/common/http';
import { IUser } from './user.model';
import { IEmployee } from './employee.model';
import { IPermission } from './permission.model';
import * as ɵngcc0 from '@angular/core';
export declare class SenwesAuthorizationService {
    private _http;
    base_url: string;
    appId: string;
    private _user;
    jwtHelper: JwtHelperService;
    constructor(_http: HttpClient);
    /**
     * Retrieves raw token from local storage
     */
    getToken(): string;
    /**
     * Retrieves decoded token from local storage
     */
    getDecodedToken(): any;
    /**
     * Confirms validity of token
     */
    authenticateToken(appId: string, customDevToken?: string): Promise<boolean>;
    private getLocalToken;
    private redirectJWTIssuerPage;
    signout(): void;
    home(): void;
    private redirectAccessDenied;
    getUserRoles(): Array<string>;
    isUserInRole(roleName: string): boolean;
    getUserPermissionsBySystemName(filter: string): IPermission[];
    hasPermission(permissionGroup: string, permissionName: string): boolean;
    getRawUserObject(): IUser;
    getUserWindowsClaim(): string;
    getUserCompany(): string;
    getUserDivision(): string;
    getUserSection(): string;
    getUserJobTitle(): string;
    getUserEmpObfuscation(): string;
    getUserSite(): string;
    getUserReportsTo(): string;
    getUserDepartment(): string;
    getUserEmployeeNumber(): string;
    getUserOneId(): string;
    getUserDisplayName(): string;
    getUserEmployeeInfo(): IEmployee;
    getTokenExpired(): boolean;
    initializeUser(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SenwesAuthorizationService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SenwesAuthorizationService>;
}

//# sourceMappingURL=senwes-authorization.service.d.ts.map