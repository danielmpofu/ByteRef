/**
 * @fileoverview added by tsickle
 * Generated from: lib/senwes-authorization.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { JwtHelperService } from '@auth0/angular-jwt';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { take } from 'rxjs/operators';
import { senwes_dev_token } from './senwes_token_dev';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SenwesAuthorizationService {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
        this.base_url = window.location.origin;
        this.appId = '';
        this.jwtHelper = new JwtHelperService();
    }
    /**
     * Retrieves raw token from local storage
     * @return {?}
     */
    getToken() {
        if (isDevMode()) {
            return localStorage.getItem("senwes_token_dev");
        }
        return localStorage.getItem("senwes_token");
    }
    /**
     * Retrieves decoded token from local storage
     * @return {?}
     */
    getDecodedToken() {
        if (isDevMode()) {
            return this.jwtHelper.decodeToken(localStorage.getItem("senwes_token_dev"));
        }
        return this.jwtHelper.decodeToken(localStorage.getItem("senwes_token"));
    }
    /**
     * Confirms validity of token
     * @param {?} appId
     * @param {?=} customDevToken
     * @return {?}
     */
    authenticateToken(appId, customDevToken = null) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                if (isDevMode()) {
                    localStorage.removeItem('senwes_token_dev');
                    if (customDevToken != null) {
                        localStorage.setItem('senwes_token_dev', customDevToken);
                    }
                    else {
                        localStorage.setItem('senwes_token_dev', senwes_dev_token);
                    }
                    resolve(true);
                    this.initializeUser();
                }
                else {
                    this.appId = appId;
                    /** @type {?} */
                    let url = '';
                    if (this.base_url.indexOf("online-qa.senwes.co.za") > -1 || this.base_url.indexOf("online-qa.hinterland.co.za") > -1 || this.base_url.indexOf("online-qa.my-intranet.co.za") > -1) {
                        url = `https://wsstaging.senwes.co.za/api/oneagri/security/api/Authentication/Validate/Token`;
                    }
                    else {
                        url = `https://ws.senwes.co.za/service/oneagri/security/api/Authentication/Validate/Token`;
                    }
                    /** @type {?} */
                    const headers = new HttpHeaders({
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.getLocalToken()}`
                    });
                    this._http.get(url, { headers: headers })
                        .pipe(take(1))
                        .subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (res === false) {
                            localStorage.removeItem('senwes_token');
                            this.redirectJWTIssuerPage(appId);
                            resolve(false);
                        }
                        else if (res === true) {
                            resolve(true);
                            this.initializeUser();
                        }
                        else {
                            resolve(false);
                            console.error('Unxpected response validate token: ', res);
                            this.redirectAccessDenied();
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        reject(false);
                        console.error("AuthService unexpected error occurred", error);
                        this.redirectAccessDenied();
                    }));
                }
            }));
        });
    }
    /**
     * @private
     * @return {?}
     */
    getLocalToken() {
        /** @type {?} */
        let token = '';
        if (isDevMode()) {
            token = localStorage.getItem("senwes_token_dev");
        }
        else {
            token = localStorage.getItem("senwes_token");
        }
        return token;
    }
    /**
     * @private
     * @param {?} returnURL
     * @return {?}
     */
    redirectJWTIssuerPage(returnURL) {
        if (this.base_url.indexOf("online-qa.senwes.co.za") > -1 || this.base_url.indexOf("online-qa.hinterland.co.za") > -1 || this.base_url.indexOf("online-qa.my-intranet.co.za") > -1) {
            window.location.href = `https://integration-qa.senwes.co.za/service/security/oneagri/auth/authentication?ApplicationID=${this.appId}`;
        }
        else {
            window.location.href = `https://identity.oneagri.co.za/authentication?ApplicationID=${this.appId}`;
        }
    }
    /**
     * @return {?}
     */
    signout() {
        localStorage.removeItem('senwes_token');
        localStorage.removeItem('senwes_token_dev');
        if (isDevMode()) {
            window.location.reload;
        }
        else {
            if (this.base_url.indexOf("online-qa.senwes.co.za") > -1 || this.base_url.indexOf("online-qa.hinterland.co.za") > -1 || this.base_url.indexOf("online-qa.my-intranet.co.za") > -1) {
                window.location.href = `https://integration-qa.senwes.co.za/service/security/oneagri/auth/signout`;
            }
            else {
                window.location.href = `https://identity.oneagri.co.za/signout`;
            }
        }
    }
    /**
     * @return {?}
     */
    home() {
        if (isDevMode()) {
            window.location.reload;
        }
        else {
            window.location.href = this.base_url;
        }
    }
    /**
     * @private
     * @return {?}
     */
    redirectAccessDenied() {
        window.location.href = `http://www.oneagri.co.za/auth/accessdenied/`;
    }
    /**
     * @return {?}
     */
    getUserRoles() {
        if (this._user) {
            return this._user.role;
        }
    }
    /**
     * @param {?} roleName
     * @return {?}
     */
    isUserInRole(roleName) {
        if (this._user) {
            if (Array.isArray(this._user.role)) {
                /** @type {?} */
                const res = this._user.role.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x == roleName));
                return (res !== -1);
            }
            else {
                return (roleName === this._user.role);
            }
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getUserPermissionsBySystemName(filter) {
        if (this._user) {
            if (Array.isArray(this._user.permissions)) {
                /** @type {?} */
                const res = this._user.permissions.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.SystemName == filter));
                return res;
            }
        }
    }
    /**
     * @param {?} permissionGroup
     * @param {?} permissionName
     * @return {?}
     */
    hasPermission(permissionGroup, permissionName) {
        if (this._user) {
            if (Array.isArray(this._user.permissions)) {
                /** @type {?} */
                const res = this._user.permissions.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.PermissionGroup == permissionGroup && x.PermissionName == permissionName));
                return res.length > 0;
            }
        }
    }
    /**
     * @return {?}
     */
    getRawUserObject() {
        return this._user;
    }
    /**
     * @return {?}
     */
    getUserWindowsClaim() {
        if (this._user) {
            return this._user.windowsuserclaim;
        }
    }
    /**
     * @return {?}
     */
    getUserCompany() {
        if (this._user.employee) {
            return this._user.employee.company;
        }
    }
    /**
     * @return {?}
     */
    getUserDivision() {
        if (this._user.employee) {
            return this._user.employee.division;
        }
    }
    /**
     * @return {?}
     */
    getUserSection() {
        if (this._user.employee) {
            return this._user.employee.section;
        }
    }
    /**
     * @return {?}
     */
    getUserJobTitle() {
        if (this._user.employee) {
            return this._user.employee.jobtitle;
        }
    }
    /**
     * @return {?}
     */
    getUserEmpObfuscation() {
        if (this._user.employee) {
            return this._user.employee.employeeobfuscation;
        }
    }
    /**
     * @return {?}
     */
    getUserSite() {
        if (this._user.employee) {
            return this._user.employee.site;
        }
    }
    /**
     * @return {?}
     */
    getUserReportsTo() {
        if (this._user.employee) {
            return this._user.employee.reportsTo;
        }
    }
    /**
     * @return {?}
     */
    getUserDepartment() {
        if (this._user.employee) {
            return this._user.employee.department;
        }
    }
    /**
     * @return {?}
     */
    getUserEmployeeNumber() {
        if (this._user) {
            return this._user.employeeNo;
        }
    }
    /**
     * @return {?}
     */
    getUserOneId() {
        if (this._user) {
            return this._user.oneid;
        }
    }
    /**
     * @return {?}
     */
    getUserDisplayName() {
        if (this._user) {
            return `${this._user.given_name} ${this._user.family_name}`;
        }
    }
    /**
     * @return {?}
     */
    getUserEmployeeInfo() {
        if (this._user) {
            return this._user.employee;
        }
    }
    /**
     * @return {?}
     */
    getTokenExpired() {
        this._user = this.jwtHelper.decodeToken(this.getToken());
        if (this._user) {
            return this._user.exp < Math.floor(Date.now() / 1000);
        }
    }
    /**
     * @return {?}
     */
    initializeUser() {
        this._user = this.jwtHelper.decodeToken(this.getToken());
        if (typeof this._user.role !== 'undefined' && !Array.isArray(this._user.role)) {
            this._user.role = [this._user.role];
        }
        if (typeof this._user.permissions !== 'undefined' && !Array.isArray(this._user.permissions)) {
            this._user.permissions = [this._user.permissions];
        }
    }
}
SenwesAuthorizationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
SenwesAuthorizationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ SenwesAuthorizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SenwesAuthorizationService_Factory() { return new SenwesAuthorizationService(i0.ɵɵinject(i1.HttpClient)); }, token: SenwesAuthorizationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SenwesAuthorizationService.prototype.base_url;
    /** @type {?} */
    SenwesAuthorizationService.prototype.appId;
    /**
     * @type {?}
     * @private
     */
    SenwesAuthorizationService.prototype._user;
    /** @type {?} */
    SenwesAuthorizationService.prototype.jwtHelper;
    /**
     * @type {?}
     * @private
     */
    SenwesAuthorizationService.prototype._http;
}
//# sourceMappingURL=data:application/json;base64,