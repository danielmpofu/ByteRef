{"version":3,"file":"sheets.directive.d.ts","sources":["sheets.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ViewContainerRef } from '@angular/core';\nimport { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';\n/**\n * `e-sheet` directive represent a sheet of the Angular Spreadsheet.\n * It must be contained in a Spreadsheet component(`ejs-spreadsheet`).\n * ```html\n * <ejs-spreadsheet>\n *   <e-sheets>\n *    <e-sheet></e-sheet>\n *    <e-sheet></e-sheet>\n *   </e-sheets>\n * </ejs-spreadsheet>\n * ```\n */\nexport declare class SheetDirective extends ComplexBase<SheetDirective> {\n    private viewContainerRef;\n    directivePropList: any;\n    childRows: any;\n    childColumns: any;\n    childRanges: any;\n    childConditionalFormats: any;\n    tags: string[];\n    /**\n     * Specifies active cell within `selectedRange` in the sheet.\n     * @default 'A1'\n     */\n    activeCell: any;\n    /**\n     * Defines the number of columns to be rendered in the sheet.\n     * @default 100\n     * @asptype int\n     */\n    colCount: any;\n    /**\n     * Configures column and its properties for the sheet.\n     * @default null\n     */\n    columns: any;\n    /**\n     * Specifies the conditional formatting for the sheet.\n     * @default []\n     */\n    conditionalFormats: any;\n    /**\n     * Gets or sets the number of frozen columns.\n     * @default 0\n     * @asptype int\n     */\n    frozenColumns: any;\n    /**\n     * Gets or sets the number of frozen rows.\n     * @default 0\n     * @asptype int\n     */\n    frozenRows: any;\n    /**\n     * Specifies index of the sheet. Based on the index, sheet properties are applied.\n     * @default 0\n     * @asptype int\n     */\n    index: any;\n    /**\n     * Specifies to  protect the cells in the sheet.\n     * @default false\n     */\n    isProtected: any;\n    /**\n     * Specifies the name of the sheet, the name will show in the sheet tabs.\n     * @default ''\n     */\n    name: any;\n    /**\n     * Represents the freeze pane top left cell. Its default value would be based on the number of freeze rows and columns.\n     * @default 'A1'\n     */\n    paneTopLeftCell: any;\n    /**\n     * Specifies the password.\n     * @default ''\n     */\n    password: any;\n    /**\n     * Configures protect and its options.\n     * @default { selectCells: false, formatCells: false, formatRows: false, formatColumns: false, insertLink: false  }\n     */\n    protectSettings: any;\n    /**\n     * Specifies the collection of range for the sheet.\n     * @default []\n     */\n    ranges: any;\n    /**\n     * Defines the number of rows to be rendered in the sheet.\n     * @default 100\n     * @asptype int\n     */\n    rowCount: any;\n    /**\n     * Configures row and its properties for the sheet.\n     * @default null\n     */\n    rows: any;\n    /**\n     * Specifies selected range in the sheet.\n     *\n     * @default 'A1:A1'\n     */\n    selectedRange: any;\n    /**\n     * Specifies to show / hide grid lines in the sheet.\n     * @default true\n     */\n    showGridLines: any;\n    /**\n     * Specifies to show / hide column and row headers in the sheet.\n     * @default true\n     */\n    showHeaders: any;\n    /**\n     * Specifies the sheet visibility state. There must be at least one visible sheet in Spreadsheet.\n     * @default 'Visible'\n     */\n    state: any;\n    /**\n     * Specified cell will be positioned at the upper-left corner of the sheet.\n     * @default 'A1'\n     */\n    topLeftCell: any;\n    /**\n     * Defines the used range of the sheet.\n     * @default { rowIndex: 0, colIndex: 0 }\n     */\n    usedRange: any;\n    constructor(viewContainerRef: ViewContainerRef);\n}\n/**\n * Sheet Array Directive\n * @private\n */\nexport declare class SheetsDirective extends ArrayBase<SheetsDirective> {\n    constructor();\n}\n"]}