import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';
import { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';
import { AllModule, BasicModule, CellFormat, Clipboard, CollaborativeEditing, ContextMenu, DataBind, Edit, Formula, FormulaBar, KeyboardNavigation, KeyboardShortcut, NumberFormat, Open, Ribbon, Save, Selection, SheetTabs, Spreadsheet } from '@syncfusion/ej2-spreadsheet';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["template"];
let input = ['height', 'id', 'left', 'src', 'top', 'width'];
let outputs = [];
class ImageDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
ImageDirective.ɵfac = function ImageDirective_Factory(t) { return new (t || ImageDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ImageDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ImageDirective, selectors: [["e-image"]], inputs: { height: "height", id: "id", left: "left", src: "src", top: "top", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ImageDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Image Array Directive
 */
class ImagesDirective extends ArrayBase {
    constructor() {
        super('image');
    }
}
ImagesDirective.ɵfac = function ImagesDirective_Factory(t) { return new (t || ImagesDirective)(); };
ImagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ImagesDirective, selectors: [["e-images"]], contentQueries: function ImagesDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ImageDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ImagesDirective.ctorParameters = () => [];

let input$1 = ['dataLabelSettings', 'height', 'id', 'isSeriesInRows', 'legendSettings', 'primaryXAxis', 'primaryYAxis', 'range', 'theme', 'title', 'type', 'width'];
let outputs$1 = [];
class ChartDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$1);
        this.directivePropList = input$1;
    }
}
ChartDirective.ɵfac = function ChartDirective_Factory(t) { return new (t || ChartDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ChartDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ChartDirective, selectors: [["e-chart"]], inputs: { dataLabelSettings: "dataLabelSettings", height: "height", id: "id", isSeriesInRows: "isSeriesInRows", legendSettings: "legendSettings", primaryXAxis: "primaryXAxis", primaryYAxis: "primaryYAxis", range: "range", theme: "theme", title: "title", type: "type", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ChartDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Chart Array Directive
 */
class ChartsDirective extends ArrayBase {
    constructor() {
        super('chart');
    }
}
ChartsDirective.ɵfac = function ChartsDirective_Factory(t) { return new (t || ChartsDirective)(); };
ChartsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ChartsDirective, selectors: [["e-charts"]], contentQueries: function ChartsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ChartDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ChartsDirective.ctorParameters = () => [];

let input$2 = ['chart', 'colSpan', 'format', 'formula', 'hyperlink', 'image', 'index', 'isLocked', 'rowSpan', 'style', 'validation', 'value', 'wrap'];
let outputs$2 = [];
/**
 * `e-cell` directive represent a cell of the Angular Spreadsheet.
 * It must be contained in a `e-row` directive.
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet>
 *    <e-rows>
 *    <e-row>
 *    <e-cells>
 *    <e-cell value='A1'></e-cell>
 *    </e-cells>
 *    </e-row>
 *    </e-rows>
 *    </e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class CellDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['image', 'chart'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$2);
        this.directivePropList = input$2;
    }
}
CellDirective.ɵfac = function CellDirective_Factory(t) { return new (t || CellDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
CellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CellDirective, selectors: [["e-cell"]], contentQueries: function CellDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ImagesDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ChartsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childImage = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childChart = _t.first);
    } }, inputs: { chart: "chart", colSpan: "colSpan", format: "format", formula: "formula", hyperlink: "hyperlink", image: "image", index: "index", isLocked: "isLocked", rowSpan: "rowSpan", style: "style", validation: "validation", value: "value", wrap: "wrap" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
CellDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Cell Array Directive
 */
class CellsDirective extends ArrayBase {
    constructor() {
        super('cells');
    }
}
CellsDirective.ɵfac = function CellsDirective_Factory(t) { return new (t || CellsDirective)(); };
CellsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CellsDirective, selectors: [["e-cells"]], contentQueries: function CellsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
CellsDirective.ctorParameters = () => [];

let input$3 = ['cells', 'customHeight', 'format', 'height', 'hidden', 'index'];
let outputs$3 = [];
/**
 * `e-row` directive represent a row of the Angular Spreadsheet.
 * It must be contained in a `e-sheet` directive.
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet>
 *    <e-rows>
 *    <e-row></e-row>
 *    </e-rows>
 *    </e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class RowDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['cells'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$3);
        this.directivePropList = input$3;
    }
}
RowDirective.ɵfac = function RowDirective_Factory(t) { return new (t || RowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
RowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RowDirective, selectors: [["e-row"]], contentQueries: function RowDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CellsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childCells = _t.first);
    } }, inputs: { cells: "cells", customHeight: "customHeight", format: "format", height: "height", hidden: "hidden", index: "index" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
RowDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Row Array Directive
 */
class RowsDirective extends ArrayBase {
    constructor() {
        super('rows');
    }
}
RowsDirective.ɵfac = function RowsDirective_Factory(t) { return new (t || RowsDirective)(); };
RowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RowsDirective, selectors: [["e-rows"]], contentQueries: function RowsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RowDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
RowsDirective.ctorParameters = () => [];

let input$4 = ['customWidth', 'format', 'hidden', 'index', 'isLocked', 'validation', 'width'];
let outputs$4 = [];
/**
 * `e-column` directive represent a column of the Angular Spreadsheet.
 * It must be contained in a `e-sheet` directive.
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet>
 *    <e-columns>
 *    <e-column width='100'></e-column>
 *    </e-columns>
 *    </e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class ColumnDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$4);
        this.directivePropList = input$4;
    }
}
ColumnDirective.ɵfac = function ColumnDirective_Factory(t) { return new (t || ColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColumnDirective, selectors: [["e-column"]], inputs: { customWidth: "customWidth", format: "format", hidden: "hidden", index: "index", isLocked: "isLocked", validation: "validation", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ColumnDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Column Array Directive
 */
class ColumnsDirective extends ArrayBase {
    constructor() {
        super('columns');
    }
}
ColumnsDirective.ɵfac = function ColumnsDirective_Factory(t) { return new (t || ColumnsDirective)(); };
ColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColumnsDirective, selectors: [["e-columns"]], contentQueries: function ColumnsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ColumnDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ColumnsDirective.ctorParameters = () => [];

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let input$5 = ['address', 'dataSource', 'query', 'showFieldAsHeader', 'startCell', 'template'];
let outputs$5 = [];
/**
 * `e-range` directive represent a range of the Angular Spreadsheet.
 * It must be contained in a `e-sheet` directive.
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet>
 *    <e-ranges>
 *    <e-range [dataSource]='data'></e-range>
 *    </e-ranges>
 *    </e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class RangeDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$5);
        this.directivePropList = input$5;
    }
}
RangeDirective.ɵfac = function RangeDirective_Factory(t) { return new (t || RangeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
RangeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RangeDirective, selectors: [["e-range"]], contentQueries: function RangeDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { address: "address", dataSource: "dataSource", query: "query", showFieldAsHeader: "showFieldAsHeader", startCell: "startCell", template: "template" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
RangeDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
RangeDirective.propDecorators = {
    'template': [{ type: ContentChild, args: ['template',] },],
};
__decorate([
    Template(),
    __metadata("design:type", Object)
], RangeDirective.prototype, "template", void 0);
/**
 * Range Array Directive
 */
class RangesDirective extends ArrayBase {
    constructor() {
        super('ranges');
    }
}
RangesDirective.ɵfac = function RangesDirective_Factory(t) { return new (t || RangesDirective)(); };
RangesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RangesDirective, selectors: [["e-ranges"]], contentQueries: function RangesDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RangeDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
RangesDirective.ctorParameters = () => [];

let input$6 = ['cFColor', 'format', 'range', 'type', 'value'];
let outputs$6 = [];
/**
 * `e-conditionalformat` directive represent a conditionalformat of the Angular Spreadsheet.
 * It must be contained in a `e-sheet` directive.
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet>
 *    <e-conditionalformats>
 *    <e-conditionalformat></e-conditionalformat>
 *    </e-conditionalformats>
 *    </e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class ConditionalFormatDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$6);
        this.directivePropList = input$6;
    }
}
ConditionalFormatDirective.ɵfac = function ConditionalFormatDirective_Factory(t) { return new (t || ConditionalFormatDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ConditionalFormatDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConditionalFormatDirective, selectors: [["e-conditionalformat"]], inputs: { cFColor: "cFColor", format: "format", range: "range", type: "type", value: "value" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConditionalFormatDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * ConditionalFormat Array Directive
 */
class ConditionalFormatsDirective extends ArrayBase {
    constructor() {
        super('conditionalformats');
    }
}
ConditionalFormatsDirective.ɵfac = function ConditionalFormatsDirective_Factory(t) { return new (t || ConditionalFormatsDirective)(); };
ConditionalFormatsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConditionalFormatsDirective, selectors: [["e-conditionalformats"]], contentQueries: function ConditionalFormatsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConditionalFormatDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConditionalFormatsDirective.ctorParameters = () => [];

let input$7 = ['activeCell', 'colCount', 'columns', 'conditionalFormats', 'frozenColumns', 'frozenRows', 'index', 'isProtected', 'name', 'paneTopLeftCell', 'password', 'protectSettings', 'ranges', 'rowCount', 'rows', 'selectedRange', 'showGridLines', 'showHeaders', 'state', 'topLeftCell', 'usedRange'];
let outputs$7 = [];
/**
 * `e-sheet` directive represent a sheet of the Angular Spreadsheet.
 * It must be contained in a Spreadsheet component(`ejs-spreadsheet`).
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet></e-sheet>
 *    <e-sheet></e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
class SheetDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['rows', 'columns', 'ranges', 'conditionalFormats'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$7);
        this.directivePropList = input$7;
    }
}
SheetDirective.ɵfac = function SheetDirective_Factory(t) { return new (t || SheetDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
SheetDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SheetDirective, selectors: [["e-sheet"]], contentQueries: function SheetDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RowsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ColumnsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, RangesDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConditionalFormatsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childRows = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childColumns = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childRanges = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childConditionalFormats = _t.first);
    } }, inputs: { activeCell: "activeCell", colCount: "colCount", columns: "columns", conditionalFormats: "conditionalFormats", frozenColumns: "frozenColumns", frozenRows: "frozenRows", index: "index", isProtected: "isProtected", name: "name", paneTopLeftCell: "paneTopLeftCell", password: "password", protectSettings: "protectSettings", ranges: "ranges", rowCount: "rowCount", rows: "rows", selectedRange: "selectedRange", showGridLines: "showGridLines", showHeaders: "showHeaders", state: "state", topLeftCell: "topLeftCell", usedRange: "usedRange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
SheetDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Sheet Array Directive
 */
class SheetsDirective extends ArrayBase {
    constructor() {
        super('sheets');
    }
}
SheetsDirective.ɵfac = function SheetsDirective_Factory(t) { return new (t || SheetsDirective)(); };
SheetsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SheetsDirective, selectors: [["e-sheets"]], contentQueries: function SheetsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, SheetDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
SheetsDirective.ctorParameters = () => [];

let input$8 = ['comment', 'name', 'refersTo', 'scope'];
let outputs$8 = [];
/**
 * `e-definedname` directive represent a defined name of the Angular Spreadsheet.
 * It must be contained in a Spreadsheet component(`ejs-spreadsheet`).
 * ```html
 * <ejs-spreadsheet>
 *   <e-definednames>
 *    <e-definedname></e-definedname>
 *    <e-definedname></e-definedname>
 *   </e-definednames>
 * </ejs-spreadsheet>
 * ```
 */
class DefinedNameDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$8);
        this.directivePropList = input$8;
    }
}
DefinedNameDirective.ɵfac = function DefinedNameDirective_Factory(t) { return new (t || DefinedNameDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
DefinedNameDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DefinedNameDirective, selectors: [["e-definedname"]], inputs: { comment: "comment", name: "name", refersTo: "refersTo", scope: "scope" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
DefinedNameDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * DefinedName Array Directive
 */
class DefinedNamesDirective extends ArrayBase {
    constructor() {
        super('definednames');
    }
}
DefinedNamesDirective.ɵfac = function DefinedNamesDirective_Factory(t) { return new (t || DefinedNamesDirective)(); };
DefinedNamesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DefinedNamesDirective, selectors: [["e-definednames"]], contentQueries: function DefinedNamesDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DefinedNameDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
DefinedNamesDirective.ctorParameters = () => [];

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs = ['activeSheetIndex', 'allowAutoFill', 'allowCellFormatting', 'allowChart', 'allowConditionalFormat', 'allowDataValidation', 'allowDelete', 'allowEditing', 'allowFiltering', 'allowFindAndReplace', 'allowFreezePane', 'allowHyperlink', 'allowImage', 'allowInsert', 'allowMerge', 'allowNumberFormatting', 'allowOpen', 'allowResizing', 'allowSave', 'allowScrolling', 'allowSorting', 'allowUndoRedo', 'allowWrap', 'autoFillSettings', 'cellStyle', 'cssClass', 'definedNames', 'enableClipboard', 'enableContextMenu', 'enableKeyboardNavigation', 'enableKeyboardShortcut', 'enablePersistence', 'enableRtl', 'height', 'isProtected', 'locale', 'openUrl', 'password', 'saveUrl', 'scrollSettings', 'selectionSettings', 'sheets', 'showAggregate', 'showFormulaBar', 'showRibbon', 'showSheetTabs', 'width'];
const outputs$9 = ['actionBegin', 'actionComplete', 'afterHyperlinkClick', 'afterHyperlinkCreate', 'beforeCellFormat', 'beforeCellRender', 'beforeCellSave', 'beforeCellUpdate', 'beforeConditionalFormat', 'beforeDataBound', 'beforeHyperlinkClick', 'beforeHyperlinkCreate', 'beforeOpen', 'beforeSave', 'beforeSelect', 'beforeSort', 'cellEdit', 'cellEditing', 'cellSave', 'contextMenuBeforeClose', 'contextMenuBeforeOpen', 'contextMenuItemSelect', 'created', 'dataBound', 'dataSourceChanged', 'dialogBeforeOpen', 'fileMenuBeforeClose', 'fileMenuBeforeOpen', 'fileMenuItemSelect', 'openComplete', 'openFailure', 'queryCellInfo', 'saveComplete', 'select', 'sortComplete'];
const twoWays = [''];
/**
 * `ejs-spreadsheet` represents the Angular Spreadsheet Component.
 * ```html
 * <ejs-spreadsheet></ejs-spreadsheet>
 * ```
 */
let SpreadsheetComponent = class SpreadsheetComponent extends Spreadsheet {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.tags = ['sheets', 'definedNames'];
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        try {
            let mod = this.injector.get('SpreadsheetClipboard');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        try {
            let mod = this.injector.get('SpreadsheetEdit');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_b) { }
        try {
            let mod = this.injector.get('SpreadsheetKeyboardNavigation');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_c) { }
        try {
            let mod = this.injector.get('SpreadsheetKeyboardShortcut');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_d) { }
        try {
            let mod = this.injector.get('SpreadsheetCollaborativeEditing');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_e) { }
        try {
            let mod = this.injector.get('SpreadsheetSelection');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_f) { }
        try {
            let mod = this.injector.get('SpreadsheetContextMenu');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_g) { }
        try {
            let mod = this.injector.get('SpreadsheetFormulaBar');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_h) { }
        try {
            let mod = this.injector.get('SpreadsheetRibbon');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_j) { }
        try {
            let mod = this.injector.get('SpreadsheetSave');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_k) { }
        try {
            let mod = this.injector.get('SpreadsheetOpen');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_l) { }
        try {
            let mod = this.injector.get('SpreadsheetSheetTabs');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_m) { }
        try {
            let mod = this.injector.get('SpreadsheetDataBind');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_o) { }
        try {
            let mod = this.injector.get('SpreadsheetAllModule');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_p) { }
        try {
            let mod = this.injector.get('SpreadsheetBasicModule');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_q) { }
        try {
            let mod = this.injector.get('SpreadsheetCellFormat');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_r) { }
        try {
            let mod = this.injector.get('SpreadsheetNumberFormat');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_s) { }
        try {
            let mod = this.injector.get('SpreadsheetFormula');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_t) { }
        this.registerEvents(outputs$9);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.tagObjects[0].instance = this.childSheets;
        if (this.childDefinedNames) {
            this.tagObjects[1].instance = /** @type {?} */ (this.childDefinedNames);
        }
        this.context.ngAfterContentChecked(this);
    }
};
SpreadsheetComponent.ɵfac = function SpreadsheetComponent_Factory(t) { return new (t || SpreadsheetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
SpreadsheetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SpreadsheetComponent, selectors: [["ejs-spreadsheet"]], contentQueries: function SpreadsheetComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, SheetsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DefinedNamesDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childSheets = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childDefinedNames = _t.first);
    } }, inputs: { activeSheetIndex: "activeSheetIndex", allowAutoFill: "allowAutoFill", allowCellFormatting: "allowCellFormatting", allowChart: "allowChart", allowConditionalFormat: "allowConditionalFormat", allowDataValidation: "allowDataValidation", allowDelete: "allowDelete", allowEditing: "allowEditing", allowFiltering: "allowFiltering", allowFindAndReplace: "allowFindAndReplace", allowFreezePane: "allowFreezePane", allowHyperlink: "allowHyperlink", allowImage: "allowImage", allowInsert: "allowInsert", allowMerge: "allowMerge", allowNumberFormatting: "allowNumberFormatting", allowOpen: "allowOpen", allowResizing: "allowResizing", allowSave: "allowSave", allowScrolling: "allowScrolling", allowSorting: "allowSorting", allowUndoRedo: "allowUndoRedo", allowWrap: "allowWrap", autoFillSettings: "autoFillSettings", cellStyle: "cellStyle", cssClass: "cssClass", definedNames: "definedNames", enableClipboard: "enableClipboard", enableContextMenu: "enableContextMenu", enableKeyboardNavigation: "enableKeyboardNavigation", enableKeyboardShortcut: "enableKeyboardShortcut", enablePersistence: "enablePersistence", enableRtl: "enableRtl", height: "height", isProtected: "isProtected", locale: "locale", openUrl: "openUrl", password: "password", saveUrl: "saveUrl", scrollSettings: "scrollSettings", selectionSettings: "selectionSettings", sheets: "sheets", showAggregate: "showAggregate", showFormulaBar: "showFormulaBar", showRibbon: "showRibbon", showSheetTabs: "showSheetTabs", width: "width" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", afterHyperlinkClick: "afterHyperlinkClick", afterHyperlinkCreate: "afterHyperlinkCreate", beforeCellFormat: "beforeCellFormat", beforeCellRender: "beforeCellRender", beforeCellSave: "beforeCellSave", beforeCellUpdate: "beforeCellUpdate", beforeConditionalFormat: "beforeConditionalFormat", beforeDataBound: "beforeDataBound", beforeHyperlinkClick: "beforeHyperlinkClick", beforeHyperlinkCreate: "beforeHyperlinkCreate", beforeOpen: "beforeOpen", beforeSave: "beforeSave", beforeSelect: "beforeSelect", beforeSort: "beforeSort", cellEdit: "cellEdit", cellEditing: "cellEditing", cellSave: "cellSave", contextMenuBeforeClose: "contextMenuBeforeClose", contextMenuBeforeOpen: "contextMenuBeforeOpen", contextMenuItemSelect: "contextMenuItemSelect", created: "created", dataBound: "dataBound", dataSourceChanged: "dataSourceChanged", dialogBeforeOpen: "dialogBeforeOpen", fileMenuBeforeClose: "fileMenuBeforeClose", fileMenuBeforeOpen: "fileMenuBeforeOpen", fileMenuItemSelect: "fileMenuItemSelect", openComplete: "openComplete", openFailure: "openFailure", queryCellInfo: "queryCellInfo", saveComplete: "saveComplete", select: "select", sortComplete: "sortComplete" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function SpreadsheetComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
SpreadsheetComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
];
SpreadsheetComponent.propDecorators = {
    'template': [{ type: ContentChild, args: ['template',] },],
};
__decorate$1([
    Template(),
    __metadata$1("design:type", Object)
], SpreadsheetComponent.prototype, "template", void 0);
SpreadsheetComponent = __decorate$1([
    ComponentMixins([ComponentBase]),
    __metadata$1("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], SpreadsheetComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageDirective, [{
        type: Directive,
        args: [{
                selector: 'e-images>e-image',
                inputs: input,
                outputs: outputs,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImagesDirective, [{
        type: Directive,
        args: [{
                selector: 'e-cell>e-images',
                queries: {
                    children: new ContentChildren(ImageDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartDirective, [{
        type: Directive,
        args: [{
                selector: 'e-charts>e-chart',
                inputs: input$1,
                outputs: outputs$1,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-cell>e-charts',
                queries: {
                    children: new ContentChildren(ChartDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CellDirective, [{
        type: Directive,
        args: [{
                selector: 'e-cells>e-cell',
                inputs: input$2,
                outputs: outputs$2,
                queries: {
                    childImage: new ContentChild(ImagesDirective),
                    childChart: new ContentChild(ChartsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CellsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-row>e-cells',
                queries: {
                    children: new ContentChildren(CellDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RowDirective, [{
        type: Directive,
        args: [{
                selector: 'e-rows>e-row',
                inputs: input$3,
                outputs: outputs$3,
                queries: {
                    childCells: new ContentChild(CellsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RowsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-sheet>e-rows',
                queries: {
                    children: new ContentChildren(RowDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColumnDirective, [{
        type: Directive,
        args: [{
                selector: 'e-columns>e-column',
                inputs: input$4,
                outputs: outputs$4,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColumnsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-sheet>e-columns',
                queries: {
                    children: new ContentChildren(ColumnDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangeDirective, [{
        type: Directive,
        args: [{
                selector: 'e-ranges>e-range',
                inputs: input$5,
                outputs: outputs$5,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { template: [{
            type: ContentChild,
            args: ['template']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangesDirective, [{
        type: Directive,
        args: [{
                selector: 'e-sheet>e-ranges',
                queries: {
                    children: new ContentChildren(RangeDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConditionalFormatDirective, [{
        type: Directive,
        args: [{
                selector: 'e-conditionalformats>e-conditionalformat',
                inputs: input$6,
                outputs: outputs$6,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConditionalFormatsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-sheet>e-conditionalformats',
                queries: {
                    children: new ContentChildren(ConditionalFormatDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SheetDirective, [{
        type: Directive,
        args: [{
                selector: 'e-sheets>e-sheet',
                inputs: input$7,
                outputs: outputs$7,
                queries: {
                    childRows: new ContentChild(RowsDirective),
                    childColumns: new ContentChild(ColumnsDirective),
                    childRanges: new ContentChild(RangesDirective),
                    childConditionalFormats: new ContentChild(ConditionalFormatsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SheetsDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-spreadsheet>e-sheets',
                queries: {
                    children: new ContentChildren(SheetDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefinedNameDirective, [{
        type: Directive,
        args: [{
                selector: 'e-definednames>e-definedname',
                inputs: input$8,
                outputs: outputs$8,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefinedNamesDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-spreadsheet>e-definednames',
                queries: {
                    children: new ContentChildren(DefinedNameDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SpreadsheetComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-spreadsheet',
                inputs: inputs,
                outputs: outputs$9,
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childSheets: new ContentChild(SheetsDirective),
                    childDefinedNames: new ContentChild(DefinedNamesDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { template: [{
            type: ContentChild,
            args: ['template']
        }] }); })();

/**
 * NgModule definition for the Spreadsheet component.
 */
class SpreadsheetModule {
}
SpreadsheetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SpreadsheetModule });
SpreadsheetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SpreadsheetModule_Factory(t) { return new (t || SpreadsheetModule)(); }, imports: [[CommonModule]] });
/**
 * @nocollapse
 */
SpreadsheetModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SpreadsheetModule, { declarations: function () { return [SpreadsheetComponent, ImageDirective, ImagesDirective, ChartDirective, ChartsDirective, CellDirective, CellsDirective, RowDirective, RowsDirective, ColumnDirective, ColumnsDirective, RangeDirective, RangesDirective, ConditionalFormatDirective, ConditionalFormatsDirective, SheetDirective, SheetsDirective, DefinedNameDirective, DefinedNamesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SpreadsheetComponent, ImageDirective, ImagesDirective, ChartDirective, ChartsDirective, CellDirective, CellsDirective, RowDirective, RowsDirective, ColumnDirective, ColumnsDirective, RangeDirective, RangesDirective, ConditionalFormatDirective, ConditionalFormatsDirective, SheetDirective, SheetsDirective, DefinedNameDirective, DefinedNamesDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SpreadsheetModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    SpreadsheetComponent,
                    ImageDirective,
                    ImagesDirective,
                    ChartDirective,
                    ChartsDirective,
                    CellDirective,
                    CellsDirective,
                    RowDirective,
                    RowsDirective,
                    ColumnDirective,
                    ColumnsDirective,
                    RangeDirective,
                    RangesDirective,
                    ConditionalFormatDirective,
                    ConditionalFormatsDirective,
                    SheetDirective,
                    SheetsDirective,
                    DefinedNameDirective,
                    DefinedNamesDirective
                ],
                exports: [
                    SpreadsheetComponent,
                    ImageDirective,
                    ImagesDirective,
                    ChartDirective,
                    ChartsDirective,
                    CellDirective,
                    CellsDirective,
                    RowDirective,
                    RowsDirective,
                    ColumnDirective,
                    ColumnsDirective,
                    RangeDirective,
                    RangesDirective,
                    ConditionalFormatDirective,
                    ConditionalFormatsDirective,
                    SheetDirective,
                    SheetsDirective,
                    DefinedNameDirective,
                    DefinedNamesDirective
                ]
            }]
    }], null, null); })();

const ClipboardService = { provide: 'SpreadsheetClipboard', useValue: Clipboard };
const EditService = { provide: 'SpreadsheetEdit', useValue: Edit };
const KeyboardNavigationService = { provide: 'SpreadsheetKeyboardNavigation', useValue: KeyboardNavigation };
const KeyboardShortcutService = { provide: 'SpreadsheetKeyboardShortcut', useValue: KeyboardShortcut };
const CollaborativeEditingService = { provide: 'SpreadsheetCollaborativeEditing', useValue: CollaborativeEditing };
const SelectionService = { provide: 'SpreadsheetSelection', useValue: Selection };
const ContextMenuService = { provide: 'SpreadsheetContextMenu', useValue: ContextMenu };
const FormulaBarService = { provide: 'SpreadsheetFormulaBar', useValue: FormulaBar };
const RibbonService = { provide: 'SpreadsheetRibbon', useValue: Ribbon };
const SaveService = { provide: 'SpreadsheetSave', useValue: Save };
const OpenService = { provide: 'SpreadsheetOpen', useValue: Open };
const SheetTabsService = { provide: 'SpreadsheetSheetTabs', useValue: SheetTabs };
const DataBindService = { provide: 'SpreadsheetDataBind', useValue: DataBind };
const AllModuleService = { provide: 'SpreadsheetAllModule', useValue: AllModule };
const BasicModuleService = { provide: 'SpreadsheetBasicModule', useValue: BasicModule };
const CellFormatService = { provide: 'SpreadsheetCellFormat', useValue: CellFormat };
const NumberFormatService = { provide: 'SpreadsheetNumberFormat', useValue: NumberFormat };
const FormulaService = { provide: 'SpreadsheetFormula', useValue: Formula };
/**
 * NgModule definition for the Spreadsheet component with providers.
 */
class SpreadsheetAllModule {
}
SpreadsheetAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SpreadsheetAllModule });
SpreadsheetAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SpreadsheetAllModule_Factory(t) { return new (t || SpreadsheetAllModule)(); }, providers: [
        ClipboardService,
        EditService,
        KeyboardNavigationService,
        KeyboardShortcutService,
        CollaborativeEditingService,
        SelectionService,
        ContextMenuService,
        FormulaBarService,
        RibbonService,
        SaveService,
        OpenService,
        SheetTabsService,
        DataBindService,
        AllModuleService,
        BasicModuleService,
        CellFormatService,
        NumberFormatService,
        FormulaService
    ], imports: [[CommonModule, SpreadsheetModule], SpreadsheetModule] });
/**
 * @nocollapse
 */
SpreadsheetAllModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SpreadsheetAllModule, { imports: function () { return [CommonModule, SpreadsheetModule]; }, exports: function () { return [SpreadsheetModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SpreadsheetAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, SpreadsheetModule],
                exports: [
                    SpreadsheetModule
                ],
                providers: [
                    ClipboardService,
                    EditService,
                    KeyboardNavigationService,
                    KeyboardShortcutService,
                    CollaborativeEditingService,
                    SelectionService,
                    ContextMenuService,
                    FormulaBarService,
                    RibbonService,
                    SaveService,
                    OpenService,
                    SheetTabsService,
                    DataBindService,
                    AllModuleService,
                    BasicModuleService,
                    CellFormatService,
                    NumberFormatService,
                    FormulaService
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ImageDirective, ImagesDirective, ChartDirective, ChartsDirective, CellDirective, CellsDirective, RowDirective, RowsDirective, ColumnDirective, ColumnsDirective, RangeDirective, RangesDirective, ConditionalFormatDirective, ConditionalFormatsDirective, SheetDirective, SheetsDirective, DefinedNameDirective, DefinedNamesDirective, SpreadsheetComponent, SpreadsheetModule, SpreadsheetAllModule, ClipboardService, EditService, KeyboardNavigationService, KeyboardShortcutService, CollaborativeEditingService, SelectionService, ContextMenuService, FormulaBarService, RibbonService, SaveService, OpenService, SheetTabsService, DataBindService, AllModuleService, BasicModuleService, CellFormatService, NumberFormatService, FormulaService, inputs as ɵa, outputs$9 as ɵb };
export { Workbook, Range, UsedRange, Sheet, getSheetIndex, getSheetIndexFromId, getSheetNameFromAddress, getSheetIndexByName, updateSelectedRange, getSelectedRange, getSingleSelectedRange, getSheet, getSheetNameCount, getMaxSheetId, initSheet, getSheetName, moveSheet, duplicateSheet, Row, getRow, setRow, isHiddenRow, getRowHeight, setRowHeight, getRowsHeight, Column, getColumn, setColumn, getColumnWidth, getColumnsWidth, isHiddenCol, Cell, getCell, setCell, skipDefaultValue, wrap, getColorCode, getCustomColors, getData, getValueFromFormat, getModel, processIdx, getRangeIndexes, getCellIndexes, getColIndex, getCellAddress, getRangeAddress, getColumnHeaderText, getIndexesFromAddress, getRangeFromAddress, getAddressFromSelectedRange, getAddressInfo, getSwapRange, isSingleCell, executeTaskAsync, WorkbookBasicModule, WorkbookAllModule, getWorkbookRequiredModules, CellStyle, FilterCollection, SortCollection, DefineName, ProtectSettings, Hyperlink, Validation, Format, ConditionalFormat, LegendSettings, DataLabelSettings, MajorGridLines, MinorGridLines, Axis, Chart, Image, AutoFillSettings, workbookDestroyed, updateSheetFromDataSource, dataSourceChanged, dataChanged, triggerDataChange, workbookOpen, beginSave, beginAction, sortImport, ribbonFind, exportDialog, getFilteredCollection, saveCompleted, applyNumberFormatting, getFormattedCellObject, refreshCellElement, setCellFormat, findAllValues, textDecorationUpdate, applyCellFormat, updateUsedRange, updateRowColCount, workbookFormulaOperation, workbookEditOperation, checkDateFormat, getFormattedBarText, activeCellChanged, openSuccess, openFailure, sheetCreated, sheetsDestroyed, aggregateComputation, getUniqueRange, removeUniquecol, checkUniqueRange, reApplyFormula, clearFormulaDependentCells, getFormulaInfoTable, formulaInValidation, beforeSort, initiateSort, sortComplete, sortRangeAlert, initiatelink, beforeHyperlinkCreate, afterHyperlinkCreate, beforeHyperlinkClick, afterHyperlinkClick, addHyperlink, setLinkModel, beforeFilter, initiateFilter, filterComplete, filterRangeAlert, clearAllFilter, wrapEvent, onSave, insert, deleteAction, insertModel, deleteModel, isValidation, cellValidation, addHighlight, dataValidate, findNext, findPrevious, goto, findWorkbookHandler, replaceHandler, replaceAllHandler, showDialog, findKeyUp, removeHighlight, queryCellInfo, count, findCount, protectSheetWorkBook, updateToggle, protectsheetHandler, replaceAllDialog, unprotectsheetHandler, workBookeditAlert, setLockCells, applyLockCells, setMerge, applyMerge, mergedRange, activeCellMergedRange, insertMerge, pasteMerge, hideShow, setCFRule, cFInitialCheck, clearCFRule, initiateClearCFRule, cFRender, clear, clearCF, clearCells, setImage, setChart, initiateChart, refreshRibbonIcons, refreshChart, refreshChartSize, updateChart, deleteChartColl, initiateChartModel, focusChartBorder, saveError, validationHighlight, updateFilter, beforeInsert, beforeDelete, deleteHyperlink, moveOrDuplicateSheet, setAutoFill, refreshCell, getFillInfo, getautofillDDB, rowFillHandler, getTextSpace, updateCustomFormatsFromImport, cFUndo, refreshClipboard, updateView, selectionComplete, refreshInsertDelete, getUpdatedFormulaOnInsertDelete, checkConditionalFormat, beforeCellUpdate, checkIsFormula, isCellReference, isChar, isRowSelected, isColumnSelected, inRange, isInRange, isLocked, isValidCellReference, skipHiddenIdx, isHeightCheckNeeded, getUpdatedFormula, updateCell, getDataRange, insertFormatRange, deleteFormatRange, toFraction, getGcd, intToDate, dateToInt, isDateTime, isNumber, toDate, parseIntValue, workbookLocale, localeData, DataBind, WorkbookOpen, WorkbookSave, WorkbookFormula, WorkbookNumberFormat, getFormatFromType, getTypeFromFormat, WorkbookSort, WorkbookFilter, WorkbookImage, WorkbookChart, WorkbookCellFormat, WorkbookEdit, WorkbookHyperlink, WorkbookInsert, WorkbookDelete, WorkbookDataValidation, WorkbookFindAndReplace, WorkbookProtectSheet, WorkbookMerge, WorkbookConditionalFormat, WorkbookAutoFill, getRequiredModules, ribbon, formulaBar, sheetTabs, refreshSheetTabs, isFormulaBarEdit, initialLoad, contentLoaded, mouseDown, spreadsheetDestroyed, editOperation, formulaOperation, formulaBarOperation, click, keyUp, keyDown, formulaKeyUp, formulaBarUpdate, onVerticalScroll, onHorizontalScroll, beforeContentLoaded, beforeVirtualContentLoaded, virtualContentLoaded, contextMenuOpen, cellNavigate, mouseUpAfterSelection, cMenuBeforeOpen, insertSheetTab, removeSheetTab, renameSheetTab, ribbonClick, refreshRibbon, enableToolbarItems, tabSwitch, selectRange, cut, copy, paste, clearCopy, dataBound, beforeDataBound, addContextMenuItems, removeContextMenuItems, enableContextMenuItems, enableFileMenuItems, hideFileMenuItems, addFileMenuItems, hideRibbonTabs, enableRibbonTabs, addRibbonTabs, addToolbarItems, hideToolbarItems, beforeRibbonCreate, rowHeightChanged, colWidthChanged, onContentScroll, deInitProperties, activeSheetChanged, renameSheet, initiateCustomSort, applySort, collaborativeUpdate, autoFit, updateToggleItem, initiateHyperlink, editHyperlink, openHyperlink, removeHyperlink, createHyperlinkElement, sheetNameUpdate, hideSheet, performUndoRedo, updateUndoRedoCollection, setActionData, getBeforeActionData, clearUndoRedoCollection, initiateFilterUI, renderFilterCell, reapplyFilter, filterByCellValue, clearFilter, getFilteredColumn, completeAction, filterCellKeyDown, getFilterRange, setAutoFit, refreshFormulaDatasource, setScrollEvent, initiateDataValidation, validationError, startEdit, invalidData, clearInvalid, protectSheet, applyProtect, unprotectSheet, protectCellFormat, gotoDlg, findDlg, findHandler, replace, created, editAlert, setUndoRedo, enableFormulaInput, protectSelection, hiddenMerge, checkPrevMerge, checkMerge, removeDataValidation, showAggregate, initiateConditionalFormat, setCF, clearViewer, initiateFormulaReference, initiateCur, clearCellRef, editValue, addressHandle, initiateEdit, forRefSelRender, blankWorkbook, insertImage, refreshImgElem, refreshImgCellObj, getRowIdxFromClientY, getColIdxFromClientX, createImageElement, deleteImage, deleteChart, refreshChartCellObj, refreshImagePosition, updateTableWidth, focusBorder, clearChartBorder, insertChart, chartRangeSelection, insertDesignChart, removeDesignChart, chartDesignTab, addChartEle, isReact, renderReactTemplates, clearTemplate, protectWorkbook, unProtectWorkbook, getPassWord, importProtectWorkbook, selectionStatus, freeze, overlayEleSize, updateScroll, positionAutoFillElement, hideAutoFillOptions, performAutoFill, selectAutoFillRange, autoFill, fillRange, UnProtectWorksheet, hideAutoFillElement, unProtectSheetPassword, updateTranslate, getUpdatedScrollPosition, updateScrollValue, getUpdateUsingRaf, removeAllChildren, getColGroupWidth, getScrollBarWidth, getSiblingsHeight, inView, getCellPosition, setPosition, removeRangeEle, locateElem, setStyleAttribute, getStartEvent, getMoveEvent, getEndEvent, isTouchStart, isTouchMove, isTouchEnd, isMouseDown, isMouseMove, isMouseUp, getClientX, getClientY, getDPRValue, setAriaOptions, destroyComponent, setResize, setWidthAndHeight, setTextLineHeight, findMaxValue, updateAction, hasTemplate, setRowEleHeight, getTextHeight, getLineHeight, getTextWidth, getLines, getBorderHeight, getExcludedColumnWidth, getTextHeightWithBorder, setMaxHgt, getMaxHgt, focus, isLockedCells, isDiscontinuousRange, clearRange, BasicModule, AllModule, ScrollSettings, SelectionSettings, DISABLED, WRAPTEXT, locale, dialog, actionEvents, overlay, fontColor, fillColor, keyCodes, defaultLocale, Spreadsheet, Clipboard, Edit, Selection, Scroll, VirtualScroll, KeyboardNavigation, KeyboardShortcut, CellFormat, Resize, CollaborativeEditing, ShowHide, SpreadsheetHyperlink, UndoRedo, WrapText, Insert, Delete, DataValidation, ProtectSheet, FindAndReplace, Merge, ConditionalFormatting, AutoFill, Ribbon, FormulaBar, Formula, SheetTabs, Open, Save, ContextMenu, NumberFormat, Sort, Filter, SpreadsheetImage, SpreadsheetChart, Render, SheetRender, RowRenderer, CellRenderer, Calculate, FormulaError, FormulaInfo, CalcSheetFamilyItem, getAlphalabel, ValueChangedArgs, Parser, CalculateCommon, isUndefined, getSkeletonVal, isExternalFileLink, getModules, getValue, setValue, ModuleLoader, CommonErrors, FormulasErrorsStrings, ExcelFileFormats, BasicFormulas } from '@syncfusion/ej2-spreadsheet';

//# sourceMappingURL=ej2-angular-spreadsheet.js.map