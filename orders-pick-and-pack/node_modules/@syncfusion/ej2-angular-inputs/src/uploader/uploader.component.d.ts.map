{"version":3,"file":"uploader.component.d.ts","sources":["uploader.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';\nimport { IComponentBase } from '@syncfusion/ej2-angular-base';\nimport { Uploader } from '@syncfusion/ej2-inputs';\nexport declare const inputs: string[];\nexport declare const outputs: string[];\nexport declare const twoWays: string[];\n/**\n * Represents the EJ2 Angular Uploader Component.\n * ```html\n * <ejs-uploader></ejs-uploader>\n * ```\n */\nexport declare class UploaderComponent extends Uploader implements IComponentBase {\n    private ngEle;\n    private srenderer;\n    private viewContainerRef;\n    private injector;\n    formCompContext: any;\n    formContext: any;\n    tagObjects: any;\n    actionComplete: any;\n    beforeRemove: any;\n    beforeUpload: any;\n    canceling: any;\n    change: any;\n    chunkFailure: any;\n    chunkSuccess: any;\n    chunkUploading: any;\n    clearing: any;\n    created: any;\n    failure: any;\n    fileListRendering: any;\n    pausing: any;\n    progress: any;\n    removing: any;\n    rendering: any;\n    resuming: any;\n    selected: any;\n    success: any;\n    uploading: any;\n    childFiles: any;\n    tags: string[];\n    /**\n     * Specifies the HTML string that used to customize the content of each file in the list.\n     *\n     * > For more information, refer to the [template](../../uploader/template/) section from the documentation.\n     *\n     * @default null\n     */\n    template: any;\n    focus: any;\n    blur: any;\n    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);\n    registerOnChange(registerFunction: (_: any) => void): void;\n    registerOnTouched(registerFunction: () => void): void;\n    writeValue(value: any): void;\n    setDisabledState(disabled: boolean): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentChecked(): void;\n    registerEvents: (eventList: string[]) => void;\n    addTwoWay: (propList: string[]) => void;\n}\n"]}